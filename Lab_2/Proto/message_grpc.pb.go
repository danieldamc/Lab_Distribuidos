// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: Proto/message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadServiceClient interface {
	Upload(ctx context.Context, in *Message, opts ...grpc.CallOption) (*AckMessage, error)
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) Upload(ctx context.Context, in *Message, opts ...grpc.CallOption) (*AckMessage, error) {
	out := new(AckMessage)
	err := c.cc.Invoke(ctx, "/grpc.UploadService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
// All implementations must embed UnimplementedUploadServiceServer
// for forward compatibility
type UploadServiceServer interface {
	Upload(context.Context, *Message) (*AckMessage, error)
	mustEmbedUnimplementedUploadServiceServer()
}

// UnimplementedUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadServiceServer struct {
}

func (UnimplementedUploadServiceServer) Upload(context.Context, *Message) (*AckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedUploadServiceServer) mustEmbedUnimplementedUploadServiceServer() {}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

func _UploadService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UploadService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).Upload(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _UploadService_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}

// CloseServiceClient is the client API for CloseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloseServiceClient interface {
	Close(ctx context.Context, in *CloseMessage, opts ...grpc.CallOption) (*AckMessage, error)
}

type closeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloseServiceClient(cc grpc.ClientConnInterface) CloseServiceClient {
	return &closeServiceClient{cc}
}

func (c *closeServiceClient) Close(ctx context.Context, in *CloseMessage, opts ...grpc.CallOption) (*AckMessage, error) {
	out := new(AckMessage)
	err := c.cc.Invoke(ctx, "/grpc.CloseService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloseServiceServer is the server API for CloseService service.
// All implementations must embed UnimplementedCloseServiceServer
// for forward compatibility
type CloseServiceServer interface {
	Close(context.Context, *CloseMessage) (*AckMessage, error)
	mustEmbedUnimplementedCloseServiceServer()
}

// UnimplementedCloseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloseServiceServer struct {
}

func (UnimplementedCloseServiceServer) Close(context.Context, *CloseMessage) (*AckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedCloseServiceServer) mustEmbedUnimplementedCloseServiceServer() {}

// UnsafeCloseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloseServiceServer will
// result in compilation errors.
type UnsafeCloseServiceServer interface {
	mustEmbedUnimplementedCloseServiceServer()
}

func RegisterCloseServiceServer(s grpc.ServiceRegistrar, srv CloseServiceServer) {
	s.RegisterService(&CloseService_ServiceDesc, srv)
}

func _CloseService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloseServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CloseService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloseServiceServer).Close(ctx, req.(*CloseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CloseService_ServiceDesc is the grpc.ServiceDesc for CloseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CloseService",
	HandlerType: (*CloseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Close",
			Handler:    _CloseService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadServiceClient interface {
	Download(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ReplyMessage, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) Download(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ReplyMessage, error) {
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, "/grpc.DownloadService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations must embed UnimplementedDownloadServiceServer
// for forward compatibility
type DownloadServiceServer interface {
	Download(context.Context, *RequestMessage) (*ReplyMessage, error)
	mustEmbedUnimplementedDownloadServiceServer()
}

// UnimplementedDownloadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadServiceServer struct {
}

func (UnimplementedDownloadServiceServer) Download(context.Context, *RequestMessage) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDownloadServiceServer) mustEmbedUnimplementedDownloadServiceServer() {}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DownloadService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).Download(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _DownloadService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}

// FetchServiceClient is the client API for FetchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchServiceClient interface {
	Fetch(ctx context.Context, in *RequestToDataNodeMessage, opts ...grpc.CallOption) (*ReplyToNameNodeMessage, error)
}

type fetchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchServiceClient(cc grpc.ClientConnInterface) FetchServiceClient {
	return &fetchServiceClient{cc}
}

func (c *fetchServiceClient) Fetch(ctx context.Context, in *RequestToDataNodeMessage, opts ...grpc.CallOption) (*ReplyToNameNodeMessage, error) {
	out := new(ReplyToNameNodeMessage)
	err := c.cc.Invoke(ctx, "/grpc.FetchService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchServiceServer is the server API for FetchService service.
// All implementations must embed UnimplementedFetchServiceServer
// for forward compatibility
type FetchServiceServer interface {
	Fetch(context.Context, *RequestToDataNodeMessage) (*ReplyToNameNodeMessage, error)
	mustEmbedUnimplementedFetchServiceServer()
}

// UnimplementedFetchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFetchServiceServer struct {
}

func (UnimplementedFetchServiceServer) Fetch(context.Context, *RequestToDataNodeMessage) (*ReplyToNameNodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedFetchServiceServer) mustEmbedUnimplementedFetchServiceServer() {}

// UnsafeFetchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchServiceServer will
// result in compilation errors.
type UnsafeFetchServiceServer interface {
	mustEmbedUnimplementedFetchServiceServer()
}

func RegisterFetchServiceServer(s grpc.ServiceRegistrar, srv FetchServiceServer) {
	s.RegisterService(&FetchService_ServiceDesc, srv)
}

func _FetchService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToDataNodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FetchService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).Fetch(ctx, req.(*RequestToDataNodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchService_ServiceDesc is the grpc.ServiceDesc for FetchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FetchService",
	HandlerType: (*FetchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _FetchService_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}
